package com.practise;
public class GroupThreadConstructor  extends Thread{
	@Override
	public void run() {	
			System.out.println(Thread.currentThread().isAlive());}
		
	public static void main(String[] args) { 
		GroupThreadConstructor thread=new GroupThreadConstructor();
		System.out.println("thread  is start or not = "+  thread.isAlive());
		thread.run();
		System.out.println(" after starting a thread =  "+  thread.isAlive());
		ThreadGroup tg1=new ThreadGroup("Parent Thread");
		Thread tg2 = new Thread(tg1,Thread,"start");
    tg2.start();
    Thread tg3=new Thread(tg1, thread, "the");
		 tg3.start();
		 Thread tg4=new Thread(tg1, thread, "work");
		 tg4.start();
		 
		 System.out.println("Thread Group Name:"+tg1.getName());
		 tg1.list();}
}


package com.practise;

public class DaemonThreadDemo extends Thread {
	public void run() {
		System.out.println("this is child Thread");
	}
	
	public static void main(String[] args) {
		System.out.println("parent thread");
		DaemonThreadDemo d=new DaemonThreadDemo()
;
//		d.setDaemon(false);
		d.start();

	}



}


package com.practise;

public class GetNameAndSetNameThread extends Thread {
	 public void run() {
		 System.out.println(Thread.currentThread().getName());
		 System.out.println("thread Task1");
	 }
	 public void runs() {
		 System.out.println(Thread.currentThread().getName());
		 
	 }
	public static void main(String[] args) {
		
		GetNameAndSetNameThread t1=new GetNameAndSetNameThread();
	       t1.start();
	       t1.runs();
	       System.out.println(Thread.currentThread().getName());
	}}
